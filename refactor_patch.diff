diff --git a/probability_ranker.py b/probability_ranker.py
index 1111111..2222222 100644
--- a/probability_ranker.py
+++ b/probability_ranker.py
@@ -1,10 +1,22 @@
 import os
 import logging
 from typing import List, Dict
+from os import getenv
+
+try:
+    from filters.opportunity_bucketer import tag_opportunities_in_place, bucket_sorted_list
+except Exception:
+    tag_opportunities_in_place = None
+    bucket_sorted_list = None
 
 class ProbabilityRanker:
     def __init__(self, logger: logging.Logger = None):
         self.logger = logger or logging.getLogger(__name__)
+        self.primary_sort_mode = getenv('PRIMARY_SORT_MODE', 'legacy').lower()  # 'legacy' | 'bucket'
+        # Optional per-bucket sort key overrides, e.g. "TRUE_ARBITRAGE:guaranteed_profit;NEAR_ARB_SUPERHEDGED:profit_after_superhedge"
+        self.bucket_sort_keys = dict(
+            s.split(':', 1) for s in getenv('BUCKET_SORT_KEYS', '').split(';') if ':' in s
+        )
 
     def rank_opportunities(self, opportunities: List[Dict]) -> List[Dict]:
         \"\"\"Return ranked list with probability metrics; optionally bucket-sort.\"\"\"
@@
-        # Step 3: Lexicographic sorting
-        sorted_opps = self._lexicographic_sort(non_dominated)
+        # Step 3: Lexicographic sorting (legacy)
+        sorted_opps = self._lexicographic_sort(non_dominated)
 
-        # Step 4: Add final rankings
+        # NEW: tag & optional bucket-first sorting
+        if tag_opportunities_in_place:
+            try:
+                tag_opportunities_in_place(sorted_opps)
+                if self.primary_sort_mode == 'bucket' and bucket_sorted_list:
+                    sorted_opps = bucket_sorted_list(sorted_opps, sort_keys=self.bucket_sort_keys or None)
+            except Exception as e:
+                self.logger.debug(f\"bucket tagging/sorting skipped: {e}\")
+
+        # Step 4: Add final rankings (post-bucket sort if enabled)
         for i, opp in enumerate(sorted_opps):
             opp['rank'] = i + 1
             opp['quality_tier'] = self._assign_quality_tier(opp)
         return sorted_opps