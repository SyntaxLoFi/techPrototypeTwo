diff --git a/expected_value_filter.py b/expected_value_filter.py
index 0000000..0000001 100644
--- a/expected_value_filter.py
+++ b/expected_value_filter.py
@@
-import numpy as np
+import numpy as np
+import os
@@ class ExpectedValueFilter:
-    def __init__(self, min_ev: float = 0.10, min_sharpe: float = 0.5, min_kelly: float = 0.01,
+    def __init__(self, min_ev: float = 0.10, min_sharpe: float = 0.5, min_kelly: float = 0.01,
                  max_downside: float = 100.0, max_downside_pct: float = 0.10,  # 10% of position size
                  downside_scaling_mode: str = 'adaptive',  # 'fixed', 'percentage', or 'adaptive'
                  probability_blend_weight: float = 0.5,
                  probability_clip_floor: float = PROBABILITY_CLIP_FLOOR,
                  probability_clip_ceiling: float = PROBABILITY_CLIP_CEILING,
                  capital_at_risk: Optional[float] = None,
                  kelly_fraction: float = KELLY_FRACTION):
         """ Initialize filter with configurable thresholds.
         """
-        self.min_ev = float(min_ev)
-        self.min_sharpe = float(min_sharpe)
-        self.min_kelly = float(min_kelly)
+        # Allow environment overrides without changing call sites
+        try:
+            if os.getenv("MIN_EV"):        min_ev = float(os.getenv("MIN_EV"))       # type: ignore
+            if os.getenv("MIN_SHARPE"):    min_sharpe = float(os.getenv("MIN_SHARPE"))  # type: ignore
+            if os.getenv("MIN_KELLY"):     min_kelly = float(os.getenv("MIN_KELLY"))  # type: ignore
+        except Exception:
+            pass
+        self.min_ev = float(min_ev)
+        self.min_sharpe = float(min_sharpe)
+        self.min_kelly = float(min_kelly)
